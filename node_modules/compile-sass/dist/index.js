"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const mkdirp = require("mkdirp");
const sass = require("node-sass");
const NodeCache = require("node-cache");
const child_process_1 = require("child_process");
const cache = new NodeCache();
const nodeEnv = process.env.NODE_ENV;
let hasSetupCleanupOnExit = false;
function resolveTildes(url) {
    if (url[0] === '~') {
        url = path.resolve('node_modules', url.substr(1));
    }
    return { file: url };
}
/*
  OPTIONS: {
    sassFilePath (default: 'public/scss'),
    sassFileExt (default: 'scss'),
    embedSrcMapInProd (default: false),
    resolveTildes (default: false),
    nodeSassOptions (default: {})
  }
*/
function setup(options) {
    const sassFilePath = options.sassFilePath || path.join(__dirname, '../public/scss/');
    const sassFileExt = options.sassFileExt || 'scss';
    const embedSrcMapInProd = options.embedSrcMapInProd || false;
    const nodeSassOptions = options.nodeSassOptions || {};
    if (options.resolveTildes) {
        const passedImporter = nodeSassOptions.importer;
        if (passedImporter) {
            nodeSassOptions.importer = Array.isArray(passedImporter)
                ? [...passedImporter, resolveTildes]
                : [passedImporter, resolveTildes];
        }
        else {
            nodeSassOptions.importer = resolveTildes;
        }
    }
    cache.set('nodeSassOptions', nodeSassOptions);
    return function (req, res) {
        const cssName = req.params.cssName.replace(/\.css/, '');
        const sassFile = path.join(sassFilePath, cssName + '.' + sassFileExt);
        const sassOptions = Object.assign(Object.assign({}, nodeSassOptions), { file: sassFile });
        if (!embedSrcMapInProd || nodeEnv !== 'production') {
            sassOptions.sourceMapEmbed = true;
        }
        sass.render(sassOptions, (error, result) => {
            if (error) {
                throw error;
            }
            if (nodeEnv === 'production') {
                // Set Cache-Control header to one day
                res.header('Cache-Control', 'public, max-age=86400');
            }
            res.contentType('text/css').send(result.css.toString());
        });
    };
}
exports.setup = setup;
exports.default = setup;
function compileSass(fullSassPath) {
    const nodeSassOptions = cache.get('nodeSassOptions');
    const sassOptions = Object.assign(Object.assign({}, nodeSassOptions), { file: fullSassPath });
    if (nodeEnv !== 'production') {
        sassOptions.sourceMapEmbed = true;
    }
    else {
        sassOptions.outputStyle = 'compressed';
    }
    return new Promise((resolve, reject) => {
        sass.render(sassOptions, (error, result) => {
            if (error) {
                return reject(error);
            }
            resolve(result.css.toString());
        });
    }).catch(console.error);
}
exports.compileSass = compileSass;
function compileSassAndSave(fullSassPath, cssPath) {
    const sassFile = fullSassPath.match(/[ \w-]+[.]+[\w]+$/)[0];
    const sassFileExt = sassFile.match(/\.[0-9a-z]+$/i)[0];
    const cssFile = sassFile.replace(sassFileExt, '.css');
    const fullCssPath = path.join(cssPath, cssFile);
    setupCleanupOnExit(cssPath);
    return compileSass(fullSassPath).then(css => {
        return new Promise((resolve, reject) => {
            mkdirp(cssPath, error => {
                if (error) {
                    return reject(error);
                }
                resolve();
            });
        }).then(() => {
            return new Promise((resolve, reject) => {
                fs.writeFile(fullCssPath, css, error => {
                    if (error) {
                        return reject(error);
                    }
                    resolve(cssFile);
                });
            });
        }).catch(console.error);
    });
}
exports.compileSassAndSave = compileSassAndSave;
function compileSassAndSaveMultiple(options) {
    const sassPath = options.sassPath;
    const cssPath = options.cssPath;
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        for (const sassFile of options.files) {
            yield compileSassAndSave(path.join(sassPath, sassFile), cssPath).then(cssFile => {
                console.log('Created', cssFile);
            }).catch(error => {
                reject(error);
            });
        }
        resolve();
    })).catch(error => {
        throw new Error(error);
    });
}
exports.compileSassAndSaveMultiple = compileSassAndSaveMultiple;
function setupCleanupOnExit(cssPath) {
    if (!hasSetupCleanupOnExit) {
        process.on('SIGINT', () => {
            console.log('Exiting, running CSS cleanup');
            fs.lstat(cssPath, (error, stats) => {
                if (stats.isDirectory) {
                    child_process_1.exec(`rm -r ${cssPath}`, function (error) {
                        if (error) {
                            console.error(error);
                            process.exit(1);
                        }
                        console.log('Deleted CSS files');
                    });
                }
                else {
                    console.error('Could not delete CSS files because the given path is not a directory:', cssPath);
                    process.exit(1);
                }
            });
            hasSetupCleanupOnExit = true;
        });
    }
}
exports.setupCleanupOnExit = setupCleanupOnExit;
//# sourceMappingURL=index.js.map